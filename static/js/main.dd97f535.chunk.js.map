{"version":3,"sources":["components/UserInfo/UserInfo.tsx","api/users.ts","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","api/todos.ts","index.tsx"],"names":["UserInfo","user","className","href","email","name","id","username","getUser","userId","usersFromServer","find","TodoInfo","todo","title","TodoList","todos","map","classNames","completed","visibleTodos","App","useState","setTodos","setTitle","setUser","titleError","setTitleError","userError","setUserError","newId","Math","max","action","method","onSubmit","event","preventDefault","newTodo","currentTodos","type","placeholder","value","onChange","target","disabled","userFromServer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dd97f535.chunk.js","sourcesContent":["import { User } from '../../types/User';\n\ntype Props = {\n  user: User | null;\n};\n\nexport const UserInfo:React.FC<Props> = ({ user }) => {\n  return (\n    <a\n      className=\"UserInfo\"\n      href={user?.email}\n    >\n      {user?.name}\n    </a>\n  );\n};\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import { UserInfo } from '../UserInfo/UserInfo';\nimport usersFromServer from '../../api/users';\nimport { User } from '../../types/User';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport function getUser(userId: number):User | null {\n  const foundUser = usersFromServer.find(user => userId === user.id);\n\n  return foundUser || null;\n}\n\nexport const TodoInfo:React.FC<Props> = ({ todo }) => {\n  const {\n    title,\n    userId,\n  } = todo;\n\n  return (\n    <>\n      <h2 className=\"TodoInfo__title\">\n        {title}\n      </h2>\n\n      <UserInfo user={getUser(userId)} />\n    </>\n  );\n};\n","import classNames from 'classnames';\nimport { TodoInfo } from '../TodoInfo/TodoInfo';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[],\n};\n\nexport const TodoList:React.FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      { todos.map(todo => {\n        return (\n          <article\n            key={todo.id}\n            data-id={todo.id}\n            className={classNames(\n              'TodoInfo',\n              { 'TodoInfo--completed': todo.completed },\n            )}\n          >\n            <TodoInfo todo={todo} />\n          </article>\n\n        );\n      })}\n    </section>\n  );\n};\n","/* eslint-disable max-len */\nimport { useState } from 'react';\nimport './App.scss';\nimport { TodoList } from './components/TodoList';\nimport { getUser } from './components/TodoInfo';\nimport { Todo } from './types/Todo';\n\nimport todosFromServer from './api/todos';\nimport usersFromServer from './api/users';\n\nconst visibleTodos: Todo[] = todosFromServer.map(todo => ({\n  ...todo,\n  user: getUser(todo.userId) || null,\n}));\n\nexport const App = () => {\n  const [todos, setTodos] = useState(visibleTodos);\n  const [title, setTitle] = useState('');\n  const [user, setUser] = useState(0);\n  const [titleError, setTitleError] = useState(false);\n  const [userError, setUserError] = useState(false);\n\n  const newId = Math.max(...todos.map(todo => todo.id));\n\n  const resetForm = () => {\n    setUser(0);\n    setTitle('');\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={(event) => {\n          event.preventDefault();\n          setTitleError(!title);\n          setUserError(!user);\n\n          const newTodo:Todo = {\n            id: newId + 1,\n            title,\n            userId: user,\n            completed: false,\n            user: getUser(user),\n          };\n\n          if (user && title) {\n            setTodos(currentTodos => [...currentTodos, newTodo]);\n            resetForm();\n          }\n        }}\n      >\n        <div className=\"field\">\n          <label>\n            {'Title: '}\n            <input\n              type=\"text\"\n              data-cy=\"titleInput\"\n              placeholder=\"Enter a title\"\n              value={title}\n              onChange={(event) => {\n                setTitle(event.target.value);\n                setTitleError(false);\n              }}\n            />\n            { titleError && (\n              <span\n                className=\"error\"\n              >\n                Please enter a title\n              </span>\n            )}\n          </label>\n\n        </div>\n\n        <div className=\"field\">\n          <label>\n            {'User: '}\n            <select\n              data-cy=\"userSelect\"\n              name=\"user\"\n              value={user}\n              onChange={(event) => {\n                setUser(+event.target.value);\n                setUserError(false);\n              }}\n            >\n              <option\n                value=\"0\"\n                disabled\n              >\n                Choose a user\n              </option>\n              {usersFromServer.map(userFromServer => {\n                const {\n                  id,\n                  name,\n                } = userFromServer;\n\n                return (\n                  <option\n                    value={id}\n                    key={id}\n                  >\n                    {name}\n                  </option>\n                );\n              })}\n            </select>\n            { userError && (\n              <span\n                className=\"error\"\n              >\n                Please choose a user\n              </span>\n            )}\n          </label>\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}